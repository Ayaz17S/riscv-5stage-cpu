// Comprehensive test program for RISC-V CPU
// Instructions in hexadecimal format with comments

// Initialize memory with comprehensive test program
@0
00000013  // NOP (addi x0, x0, 0)

@1 
00100093  // addi x1, x0, 1      # x1 = 1

@2
00200113  // addi x2, x0, 2      # x2 = 2

@3
003081B3  // add x3, x1, x3      # x3 = x1 + x3 = 1 + 0 = 1

@4
002081B3  // add x3, x1, x2      # x3 = x1 + x2 = 1 + 2 = 3

@5
40208233  // sub x4, x1, x2      # x4 = x1 - x2 = 1 - 2 = -1 (0xFFFFFFFF)

@6
0020F2B3  // and x5, x1, x2      # x5 = x1 & x2 = 1 & 2 = 0

@7
0020E333  // or x6, x1, x2       # x6 = x1 | x2 = 1 | 2 = 3

@8
0020C3B3  // xor x7, x1, x2      # x7 = x1 ^ x2 = 1 ^ 2 = 3

@9
00209433  // sll x8, x1, x2      # x8 = x1 << x2 = 1 << 2 = 4

@A
0020D4B3  // srl x9, x1, x2      # x9 = x1 >> x2 = 1 >> 2 = 0

@B
0020A533  // slt x10, x1, x2     # x10 = (x1 < x2) ? 1 : 0 = 1

@C
0020B5B3  // sltu x11, x1, x2    # x11 = (x1 < x2 unsigned) ? 1 : 0 = 1

@D
00108613  // addi x12, x1, 1     # x12 = x1 + 1 = 2

@E
00512683  // lw x13, 5(x2)       # x13 = mem[x2 + 5] = mem[7]

@F
00D12223  // sw x13, 4(x2)       # mem[x2 + 4] = mem[6] = x13

@10
00208663  // beq x1, x2, +12     # if x1 == x2, branch to PC+12 (should not branch)

@11
00100713  // addi x14, x0, 1     # x14 = 1

@12
00209463  // bne x1, x2, +8      # if x1 != x2, branch to PC+8 (should branch)

@13
00200793  // addi x15, x0, 2     # x15 = 2 (should be skipped due to branch)

@14
00300793  // addi x15, x0, 3     # x15 = 3 (branch target)